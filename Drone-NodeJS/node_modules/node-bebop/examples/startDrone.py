#import pika, os, urlparse, logging
import pika, os

def callNodeJsFromDrone():
    from Naked.toolshed.shell import execute_js

    print ("calling flightplan.js")
    success = execute_js('flightplan.js')
    if success:
        print ("success")
    else:
        print ("error")

#logging.basicConfig()

# Access the CLODUAMQP_URL environment variable and parse it (fallback to localhost)
#url = os.environ.get('CLOUDAMQP_URL', 'amqp://tetbnpzv:0xL4VEtuRN_YwSvu-4wrpND-OqlEjYWo@chicken.rmq.cloudamqp.com/tetbnpzv')
#params = pika.URLParameters('amqp://tetbnpzv:0xL4VEtuRN_YwSvu-4wrpND-OqlEjYWo@chicken.rmq.cloudamqp.com/tetbnpzv')
#params.socket_timeout = 5
#connection = pika.BlockingConnection(params) # Connect to CloudAMQP
#channel = connection.channel() # start a channel
exchange_name = "droneActivities"
connection = pika.BlockingConnection(pika.ConnectionParameters(
        host='192.168.160.174'))
channel = connection.channel()

channel.exchange_declare(exchange=exchange_name,
                         type='fanout')

result = channel.queue_declare(exclusive=True)
queue_name = result.method.queue

channel.queue_bind(exchange=exchange_name,
                   queue=queue_name)

print(' [*] Waiting for logs. To exit press CTRL+C')

def callback(ch, method, properties, body):
    print(" [x] %r" % body)
    callNodeJsFromDrone()

channel.basic_consume(callback,
                      queue=queue_name,
                      no_ack=True)

channel.start_consuming()
# send a message
#channel.basic_publish(exchange='', routing_key='hello', body='Hello CloudAMQP!')
#print " [x] Sent 'Hello World!'"




#callNodeJsFromDrone()
# create a function which is called on incoming messages
def callback(ch, method, properties, body):
  print (" [x] Received %r" % (body))
  print ("calling callNodeJsFromDrone()")
  callNodeJsFromDrone()

print ("waiting for orders")
# set up subscription on the queue
channel.basic_consume(callback,
    queue='droneActivities',
    no_ack=True)

channel.start_consuming() # start consuming (blocks)

connection.close()

